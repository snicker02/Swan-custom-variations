[PARAM_DEFS]
name = scale, value = 2.5, type = float, min = 0.0, max = 10.0
name = filled, value = 1.0, type = float, min = 0.0, max = 1.0
name = headWidth, value = 1.0, type = float, min = 0.0, max = 5.0
name = headHeight, value = 1.0, type = float, min = 0.0, max = 5.0
name = armLength, value = 2.0, type = float, min = 0.0, max = 5.0
name = armSpread, value = 1.0, type = float, min = 0.0, max = 5.0
name = bodyWidth, value = 1.0, type = float, min = 0.0, max = 5.0
name = legHeight, value = 1.0, type = float, min = 0.0, max = 5.0
name = legSpread, value = 1.0, type = float, min = 0.0, max = 5.0
name = legSeparationWidth, value = 0.1, type = float, min = -2.0, max = 2.0
name = legSeparationHeight, value = 0.0, type = float, min = -2.0, max = 2.0

[VARIATION_CODE]
// --- Start of Meeple Variation Code ---

// Base shape definition (right half)
float baseMeepleX[14] = {0.00, 0.15, 0.28, 0.35, 0.35, 0.40, 0.55, 0.55, 0.45, 0.40, 0.45, 0.40, 0.20, 0.00};
float baseMeepleY[14] = {-1.00, -0.99, -0.90, -0.75, -0.60, -0.50, -0.45, -0.25, -0.15, 0.10, 0.80, 0.98, 1.00, 0.85};
int numPoints = 14;

// Dynamically generate the meeple shape based on parameters
float dynamicMeepleX[14];
float dynamicMeepleY[14];

// Define the adjusted Y position of the leg separation point. Positive value moves it UP.
float separationPointY = baseMeepleY[9] - legSeparationHeight;

int i;
for (i = 0; i < numPoints; i = i + 1) {
    // Start with the base shape coordinates
    dynamicMeepleX[i] = baseMeepleX[i];
    dynamicMeepleY[i] = baseMeepleY[i];

    if (i <= 4) { // Head
        dynamicMeepleX[i] = dynamicMeepleX[i] * headWidth;
        dynamicMeepleY[i] = dynamicMeepleY[i] * headHeight;
    } else if (i >= 5 && i <= 8) { // Arms
        float armBaseX = baseMeepleX[4] * bodyWidth;
        float armBaseY = baseMeepleY[4] * headHeight;
        float armOffsetX = (baseMeepleX[i] - baseMeepleX[4]) * armLength;
        float armOffsetY = (baseMeepleY[i] - baseMeepleY[4]) * armSpread;
        dynamicMeepleX[i] = armBaseX + armOffsetX;
        dynamicMeepleY[i] = armBaseY + armOffsetY;
    } else if (i == 9) { // Body/Waist (the point that becomes the top of the leg separation)
        dynamicMeepleX[i] = dynamicMeepleX[i] * bodyWidth;
        dynamicMeepleY[i] = separationPointY; // Set the adjusted Y
    } else if (i >= 10) { // All lower points
        float originalOffsetY = baseMeepleY[i] - baseMeepleY[9];
        
        // Default Y calculation for outer leg points, based on the original waistline
        dynamicMeepleY[i] = baseMeepleY[9] + (originalOffsetY * legHeight);
        
        // For the inner points (the bottom of the V-shape), base their height on the NEW separation point
        if (i == 13) {
            dynamicMeepleY[i] = separationPointY + (originalOffsetY * legHeight);
        }

        // Apply horizontal adjustments ONLY to the leg's side-points
        if (i >= 10 && i <= 12) {
            // Spread scales the base shape's width, Separation Width shifts the result.
            dynamicMeepleX[i] = (baseMeepleX[i] * legSpread) + legSeparationWidth;
        }
    }
}

// Get a random number from 0 to 1 to trace along the outline.
// Assuming 'uv' and 'rngState' are built-in variables provided by the environment.
float t = rand8(uv, rngState);

// Scale t to the number of segments in our outline
float numSegments = numPoints - 1;
float scaled_t = t * numSegments;
int segmentIndex = int(scaled_t); // FIX: Explicitly cast float to int

// Ensure we don't go out of bounds
if (segmentIndex >= numSegments) {
    segmentIndex = int(numSegments) - 1; // FIX: Explicitly cast float to int
}

// Get the local progress within the current line segment
float segment_t = scaled_t - float(segmentIndex);

// Get the start and end points of the current segment
float p1x = dynamicMeepleX[segmentIndex];
float p1y = dynamicMeepleY[segmentIndex];
float p2x = dynamicMeepleX[segmentIndex + 1];
float p2y = dynamicMeepleY[segmentIndex + 1];

// Linearly interpolate between the two points to find our position on the outline
float lx = lerp(p1x, p2x, segment_t);
float ly = lerp(p1y, p2y, segment_t);

// Randomly choose to reflect the point across the Y-axis to draw the left half
if (rand8(uv, rngState) < 0.5) {
    lx = -lx;
}

// If 'filled' is active, place the point at a random radius from the center.
float r = 1.0;
if (filled > 0.0) {
    // Check against the 'filled' probability
    if (filled > rand8(uv, rngState)) {
        // If the check passes, assign a new random radius
        r = rand8(uv, rngState);
    }
}

// Apply the final transformation
_vx += r * lx * scale * amount;
_vy += r * ly * scale * amount;

// --- End of Meeple Variation Code ---

[INV_VARIATION_CODE]

[CUSTOM_FUNCTIONS]
float lerp(float a, float b, float t) {
    return a + t * (b - a);
}

[FUNC_DEPENDENCIES]
